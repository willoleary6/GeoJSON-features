import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../app/store";

export interface coordinates {
    lat: number;
    lng: number;
}

export interface GeoMapState {
    latitude: number;
    longitude: number;
    canInduceMapMovements: boolean;
    centreCoordinates: coordinates;
    northWestCoordinates: coordinates;
    northEastCoordinates: coordinates;
    southWestCoordinates: coordinates;
    southEastCoordinates: coordinates;
}

const initialState: GeoMapState = {
    latitude: 52.52437,
    longitude: 13.41053,
    canInduceMapMovements: true,

    centreCoordinates: { lat: 52.52437, lng: 13.41053 },
    northWestCoordinates: { lat: 0, lng: 0 },
    northEastCoordinates: { lat: 0, lng: 0 },
    southWestCoordinates: { lat: 0, lng: 0 },
    southEastCoordinates: { lat: 0, lng: 0 },
};

export const updateCentreCoordinates = createAsyncThunk(
    "geoMap/updateCentreCoordinates",
    async (newCoordinates: coordinates) => {
        return newCoordinates;
    }
);

export const updateNorthWestCoordinates = createAsyncThunk(
    "geoMap/updateNorthWestCoordinates",
    async (newCoordinates: coordinates) => {
        return newCoordinates;
    }
);

export const updateNorthEastCoordinates = createAsyncThunk(
    "geoMap/updateNorthEastCoordinates",
    async (newCoordinates: coordinates) => {
        return newCoordinates;
    }
);

export const updateSouthWestCoordinates = createAsyncThunk(
    "geoMap/updateSouthWestCoordinates",
    async (newCoordinates: coordinates) => {
        return newCoordinates;
    }
);

export const updateSouthEastCoordinates = createAsyncThunk(
    "geoMap/updateSouthEastCoordinates",
    async (newCoordinates: coordinates) => {
        return newCoordinates;
    }
);

export const disableReduxInducedMapMovements = createAsyncThunk(
    "geoMap/disableReduxInducedMapMovements",
    async () => {
        return false;
    }
);

export const enableReduxInducedMapMovements = createAsyncThunk(
    "geoMap/enableReduxInducedMapMovements",
    async () => {
        return true;
    }
);

export const fetchOpenStreetData = createAsyncThunk("geoMap/fetchOpenStreetData", async () => {
    console.log("ready");
    return null;
});

export const geoMapSlice = createSlice({
    name: "GeoMap",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder

            .addCase(updateCentreCoordinates.fulfilled, (GeoMapState, action) => {
                GeoMapState.centreCoordinates = action.payload;
            })
            .addCase(updateNorthWestCoordinates.fulfilled, (GeoMapState, action) => {
                GeoMapState.northWestCoordinates = action.payload;
            })
            .addCase(updateNorthEastCoordinates.fulfilled, (GeoMapState, action) => {
                GeoMapState.northEastCoordinates = action.payload;
            })
            .addCase(updateSouthWestCoordinates.fulfilled, (GeoMapState, action) => {
                GeoMapState.southWestCoordinates = action.payload;
            })
            .addCase(updateSouthEastCoordinates.fulfilled, (GeoMapState, action) => {
                GeoMapState.southEastCoordinates = action.payload;
            })

            .addCase(disableReduxInducedMapMovements.fulfilled, (GeoMapState, action) => {
                GeoMapState.canInduceMapMovements = action.payload;
            })
            .addCase(enableReduxInducedMapMovements.fulfilled, (GeoMapState, action) => {
                GeoMapState.canInduceMapMovements = action.payload;
            });
    },
});

export const {} = geoMapSlice.actions;

export const selectGeoMap = (state: RootState): GeoMapState => state.geoMap;

export default geoMapSlice.reducer;
